{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost, LIKE_POST_REQUEST, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_SUCCESS } from './../reducers/post';\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 15;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeEvery(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeEvery(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeEvery(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeEvery(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/post.js"],"names":["addPost","loadPost","removePost","addComment","unlikePost","likePost","uploadImages","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchUploadImages","postSaga","all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","generateDummyPost","LIKE_POST_REQUEST","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","shortId","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_SUCCESS","REMOVE_POST_OF_ME","addPostAPI","data","post","action","result","type","id","error","response","loadPostAPI","get","removePostAPI","console","addCommentAPI","postId","unlikePostAPI","likePostAPI","patch","uploadImagesAPI"],"mappings":";;oDAYUA,O;qDAsBAC,Q;qDAmBAC,U;qDAwBAC,U;qDAoBAC,U;qDAoBAC,Q;qDAoBAC,Y;qDAgBAC,a;qDAIAC,e;sDAIAC,Y;sDAIAC,a;sDAKAC,e;sDAIAC,e;sDAIAC,iB;sDAIeC,Q;;AAtLzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,KAArE,QAAiF,oBAAjF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,gBAAhD,EAAkEC,gBAAlE,EAAoFC,mBAApF,EAAyGC,mBAAzG,EAA8HC,mBAA9H,EAAmJC,iBAAnJ,EAAsKC,iBAAtK,EAAyLC,iBAAzL,EAA4MC,iBAA5M,EAA+NC,iBAA/N,EAAkPC,iBAAlP,EAAqQC,mBAArQ,EAA0RC,qBAA1R,EAAiTC,qBAAjT,QAA8U,kBAA9U;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,EAAwEC,iBAAxE,EAA2FC,mBAA3F,EAAgHC,qBAAhH,QAA6I,oBAA7I;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAO3B,KAAK,CAAC4B,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACH;;AAED,SAAUnD,OAAV,CAAkBqD,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAACiC,UAAD,EAAaG,MAAM,CAACF,IAApB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAG3B,gBADD;AAENuB,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAOQ,iBAAMjC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGd,cADD;AAENU,YAAAA,IAAI,EAAGG,MAAM,CAACH,IAAP,CAAYK;AAFb,WAAD,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYQ,iBAAMtC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAG7B,gBADD;AAEN+B,YAAAA,KAAK,EAAG,YAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAASQ,WAAT,CAAqBR,IAArB,EAA0B;AACtB,SAAO3B,KAAK,CAACoC,GAAN,CAAU,QAAV,EAAoBT,IAApB,CAAP;AACH;;AAED,SAAUlD,QAAV,CAAmBoD,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAAC0C,WAAD,EAAcN,MAAM,CAACF,IAArB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGtB,iBADD;AAENkB,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMjC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGrB,iBADD;AAENuB,YAAAA,KAAK,EAAG,aAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAASU,aAAT,CAAuBV,IAAvB,EAA4B;AACxB,SAAO3B,KAAK,UAAL,iBAAsB2B,IAAtB,EAAP;AACH;;AAED,SAAUjD,UAAV,CAAqBmD,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAAC4C,aAAD,EAAgBR,MAAM,CAACF,IAAvB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGxB,mBADD;AAENoB,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAOQ,iBAAMjC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGN,iBADD;AAENE,YAAAA,IAAI,EAAGE,MAAM,CAACF;AAFR,WAAD,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYQW,UAAAA,OAAO,CAACL,KAAR;AAZR;AAaQ,iBAAMvC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGX,mBADD;AAENa,YAAAA,KAAK,EAAG,aAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASY,aAAT,CAAuBZ,IAAvB,EAA4B;AACxB,SAAO3B,KAAK,CAAC4B,IAAN,iBAAoBD,IAAI,CAACa,MAAzB,eAA2Cb,IAA3C,CAAP;AACH;;AAED,SAAUhD,UAAV,CAAqBkD,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAAC8C,aAAD,EAAgBV,MAAM,CAACF,IAAvB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAG9B,mBADD;AAEN0B,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQW,UAAAA,OAAO,CAACL,KAAR;AARR;AASQ,iBAAMvC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAG1B,mBADD;AAEN4B,YAAAA,KAAK,EAAG,aAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASc,aAAT,CAAuBd,IAAvB,EAA4B;AACxB,SAAO3B,KAAK,UAAL,iBAAsB2B,IAAtB,WAAP;AACH;;AAED,SAAU/C,UAAV,CAAqBiD,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAACgD,aAAD,EAAgBZ,MAAM,CAACF,IAAvB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGjB,mBADD;AAENa,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQW,UAAAA,OAAO,CAACL,KAAR;AARR;AASQ,iBAAMvC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGR,mBADD;AAENU,YAAAA,KAAK,EAAG,aAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASe,WAAT,CAAqBf,IAArB,EAA0B;AACtB,SAAO3B,KAAK,CAAC2C,KAAN,iBAAqBhB,IAArB,WAAP;AACH;;AAED,SAAU9C,QAAV,CAAmBgD,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAACiD,WAAD,EAAcb,MAAM,CAACF,IAArB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGT,iBADD;AAENK,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQW,UAAAA,OAAO,CAACL,KAAR;AARR;AASQ,iBAAMvC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGlB,iBADD;AAENoB,YAAAA,KAAK,EAAG,aAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASiB,eAAT,CAAyBjB,IAAzB,EAA8B;AAC1B,SAAO3B,KAAK,CAAC4B,IAAN,iBAA2BD,IAA3B,CAAP;AACH;;AAED,SAAU7C,YAAV,CAAuB+C,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMpC,IAAI,CAACmD,eAAD,EAAkBf,MAAM,CAACF,IAAzB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMpC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGP,qBADD;AAENG,YAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQW,UAAAA,OAAO,CAACL,KAAR;AARR;AASQ,iBAAMvC,GAAG,CAAC;AACNqC,YAAAA,IAAI,EAAGf,qBADD;AAENiB,YAAAA,KAAK,EAAG,aAAIC,QAAJ,CAAaP;AAFf,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAU5C,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMc,UAAU,CAACe,iBAAD,EAAoB/B,QAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMa,UAAU,CAACwB,mBAAD,EAAsBzC,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUK,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMW,SAAS,CAACO,gBAAD,EAAmB3B,OAAnB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUU,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMU,SAAS,CAACY,iBAAD,EAAoB/B,QAApB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUU,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMS,SAAS,CAACuB,mBAAD,EAAsBzC,UAAtB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUU,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,SAAS,CAACU,mBAAD,EAAsB3B,UAAtB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUU,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,SAAS,CAACmB,qBAAD,EAAwBjC,YAAxB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUQ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,iBAAD,CADE,EAENG,IAAI,CAACT,aAAD,CAFE,EAGNS,IAAI,CAACR,eAAD,CAHE,EAINQ,IAAI,CAACP,YAAD,CAJE,EAKNO,IAAI,CAACN,aAAD,CALE,EAMNM,IAAI,CAACL,eAAD,CANE,EAONK,IAAI,CAACJ,eAAD,CAPE,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost, LIKE_POST_REQUEST, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE } from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_SUCCESS } from './../reducers/post';\r\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post(\"/post\", data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadPostAPI(data){\r\n    return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* loadPost(action){\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type : LOAD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : LOAD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action){\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data){\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action){\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type : UNLIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : UNLIKE_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data){\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action){\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type : LIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : LIKE_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data){\r\n    return axios.post(`/post/images`, data);\r\n}\r\n\r\nfunction* uploadImages(action){\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type : UPLOAD_IMAGES_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : UPLOAD_IMAGES_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeEvery(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeEvery(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function* postSaga(){\r\n\r\n    yield all([\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}