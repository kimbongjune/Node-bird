{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      //data : result.data,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //data : result.data,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeEvery(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/post.js"],"names":["all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_POST_TO_ME","shortId","addPostAPI","data","post","addCommentAPI","addPost","action","id","generate","type","content","err","error","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,KAArE,QAAiF,oBAAjF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,gBAAhD,EAAkEC,gBAAlE,EAAoFC,mBAApF,EAAyGC,mBAAzG,QAAoI,kBAApI;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOV,KAAK,CAACW,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,SAASE,aAAT,CAAuBF,IAAvB,EAA4B;AACxB,SAAOV,KAAK,CAACW,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,UAAUG,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMgB,EAAE,GAAGP,OAAO,CAACQ,QAAR,EAAX;AACA,UAAMtB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAGb,gBADD;AAEN;AACAM,MAAAA,IAAI,EAAG;AACHK,QAAAA,EADG;AAEHG,QAAAA,OAAO,EAAGJ,MAAM,CAACJ;AAFd;AAHD,KAAD,CAAT;AAQA,UAAMhB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAGV,cADD;AAENG,MAAAA,IAAI,EAAGK;AAFD,KAAD,CAAT;AAIH,GAhBD,CAgBE,OAAOI,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAGf,gBADD;AAENkB,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaX;AAFf,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUY,UAAV,CAAqBR,MAArB,EAA4B;AACxB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAML,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAGhB,mBADD;AAEN;AACAS,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAHR,KAAD,CAAT;AAKH,GARD,CAQE,OAAOS,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAGZ,mBADD;AAENe,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaX;AAFf,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,YAAV,GAAwB;AACpB,QAAM3B,SAAS,CAACO,gBAAD,EAAmBU,OAAnB,CAAf;AACH;;AAED,UAAUW,eAAV,GAA2B;AACvB,QAAM5B,SAAS,CAACU,mBAAD,EAAsBgB,UAAtB,CAAf;AACH;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAE/B,QAAMlC,GAAG,CAAC,CACNC,IAAI,CAAC+B,YAAD,CADE,EAEN/B,IAAI,CAACgC,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}