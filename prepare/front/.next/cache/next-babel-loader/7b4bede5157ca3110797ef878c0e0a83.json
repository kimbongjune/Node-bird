{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from './../reducers/post';\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction loadPostAPI(data) {\n  return axios.post(\"/api/loadpost\", data);\n}\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/removepost\", data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/addcomment\", data);\n}\n\nfunction addPost(action) {\n  var result, id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          id = shortId.generate();\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            //data : result.data,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction loadPost(action) {\n  return _regeneratorRuntime.wrap(function loadPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            //data : result.data,\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            //data : result.data,\n            data: action.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            //data : result.data,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/post.js"],"names":["addPost","loadPost","removePost","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga","all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","generateDummyPost","ADD_POST_TO_ME","shortId","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","addPostAPI","data","post","loadPostAPI","removePostAPI","addCommentAPI","action","result","id","generate","type","content","error","response"],"mappings":"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","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost } from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from './../reducers/post';\r\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction loadPostAPI(data){\r\n    return axios.post(\"/api/loadpost\", data);\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.post(\"/api/removepost\", data);\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(\"/api/addcomment\", data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* loadPost(action){\r\n    try {\r\n        //const result = yield call(loadPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : LOAD_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : LOAD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* removePost(action){\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeEvery(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}