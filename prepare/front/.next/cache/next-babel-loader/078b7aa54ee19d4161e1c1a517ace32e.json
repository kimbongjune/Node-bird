{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport postSaga from \"./post\";\nimport userSaga from \"./user\";\naxios.defaults.baseURL = \"http://localhost:3060\"; //take는 한번 실행되면 사라짐\n//takeEvery는 while(true)와 동일함 여러번의 이벤트가 동시에 실행(더블클릭)되면 이벤트를 입력받은 만큼 실행\n//takeLatest는 여러번의 이벤트가 동시에 실행 되어도 마지막에 발생한 이벤트 한번만 실행 서버로 요청은 여러번 가지만 응답을 한번만 받음 새로고침하면 서버에는 두번의 요청이 들어갔기 때문에 서버에서 \n//반영을 해줘야한다.\n//throttle은 시간을 줘서 이벤트를 제어한다. \n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(postSaga), fork(userSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/index.js"],"names":["rootSaga","all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","postSaga","userSaga","defaults","baseURL"],"mappings":";;oDAkByBA,Q;;AAlBzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,KAArE,QAAiF,oBAAjF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyB,uBAAzB,C,CAIA;AACA;AACA;AACA;AACA;;AAIA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACS,QAAD,CADE,EAENT,IAAI,CAACU,QAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\n\r\nimport postSaga from \"./post\";\r\nimport userSaga from \"./user\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3060\";\r\n\r\n\r\n\r\n//take는 한번 실행되면 사라짐\r\n//takeEvery는 while(true)와 동일함 여러번의 이벤트가 동시에 실행(더블클릭)되면 이벤트를 입력받은 만큼 실행\r\n//takeLatest는 여러번의 이벤트가 동시에 실행 되어도 마지막에 발생한 이벤트 한번만 실행 서버로 요청은 여러번 가지만 응답을 한번만 받음 새로고침하면 서버에는 두번의 요청이 들어갔기 때문에 서버에서 \r\n//반영을 해줘야한다.\r\n//throttle은 시간을 줘서 이벤트를 제어한다. \r\n\r\n\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        fork(postSaga),\r\n        fork(userSaga),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}