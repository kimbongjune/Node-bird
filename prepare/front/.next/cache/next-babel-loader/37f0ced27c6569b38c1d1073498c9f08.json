{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(V => V.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = {...state.mainPosts[postIndex]};\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading : false,\n          //     addCommentDone : true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/nodeBird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","V","PostId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths :[],\r\n    hasMorePost : true,\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    loadPostError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() =>({\r\n    id : shortId.generate(),\r\n    User :{\r\n        id : shortId.generate(),\r\n        nickname : faker.name.findName()\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images : [{\r\n        src : faker.image.image(),\r\n    }],\r\n    Comments : [{\r\n        User :{\r\n            id : shortId.generate(),\r\n            nickname : faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}))\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) =>{\r\n    return produce(state, (draft) =>{\r\n        switch(action.type){\r\n            case LOAD_POST_REQUEST:\r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n            case LOAD_POST_SUCCESS:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POST_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((V) => V.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}