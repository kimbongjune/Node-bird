{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      //data : result.data,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: error.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\" //data : result.data,\n\n    });\n  } catch (error) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogout() {\n  yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/user.js"],"names":["all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","logInAPI","data","post","logIn","action","type","error","response","logOutAPI","logOut","watchLogin","watchLogout","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,KAArE,QAAiF,oBAAjF;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAML,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAG,gBADD;AAEN;AACAJ,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAHR,KAAD,CAAT;AAKH,GARD,CAQE,OAAOK,KAAP,EAAc;AACZ,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAG,gBADD;AAENJ,MAAAA,IAAI,EAAGK,KAAK,CAACC,QAAN,CAAeN;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAoB;AAChB,SAAOT,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAkB;AACd,MAAI;AACA;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAML,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAG,iBADD,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAG,iBADD;AAENJ,MAAAA,IAAI,EAAGK,KAAK,CAACC,QAAN,CAAeN;AAFhB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,UAAV,GAAsB;AAClB,QAAMf,SAAS,CAAC,gBAAD,EAAmBQ,KAAnB,CAAf;AACH;;AAED,UAAUQ,WAAV,GAAuB;AACnB,QAAMhB,SAAS,CAAC,iBAAD,EAAoBc,MAApB,CAAf;AACH;;AACD,eAAe,UAAUG,QAAV,GAAoB;AAE/B,QAAMtB,GAAG,CAAC,CACNC,IAAI,CAACmB,UAAD,CADE,EAENnB,IAAI,CAACoB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction logInAPI(data){\r\n    return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action){\r\n    try {\r\n        //const result = yield call(logInAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : \"LOG_IN_SUCCESS\",\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type : \"LOG_IN_FAILURE\",\r\n            data : error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut(){\r\n    try {\r\n        //const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : \"LOG_OUT_SUCCESS\",\r\n            //data : result.data,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type : \"LOG_OUT_FAILURE\",\r\n            data : error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nexport default function* userSaga(){\r\n\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}