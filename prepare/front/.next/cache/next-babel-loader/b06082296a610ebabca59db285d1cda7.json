{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  hasMorePost: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UostId);\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = false;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(V => V.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = {...state.mainPosts[postIndex]};\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading : false,\n          //     addCommentDone : true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/nodeBird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostDone","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","post","find","v","id","PostId","Likers","push","UserId","error","filter","UostId","concat","unshift","V","Comments"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths :[],\r\n    hasMorePost : true,\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    hasMorePost : true,\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    hasMorePost : true,\r\n\r\n    likePostLoading : false,\r\n    likePostDone : false,\r\n    likePostError : null,\r\n\r\n    unlikePostLoading : false,\r\n    unlikePostDone : false,\r\n    unlikePostError : null,\r\n\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    loadPostError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n};\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) =>{\r\n    return produce(state, (draft) =>{\r\n        switch(action.type){\r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS:{\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers.push({id : action.data.UserId});\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS:{\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UostId);\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n            case LOAD_POST_REQUEST:\r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n            case LOAD_POST_SUCCESS:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = false;\r\n                break;\r\n            case LOAD_POST_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((V) => V.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}