{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from './../reducers/post';\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/removepost\", data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/addcomment\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      //data : result.data,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //data : result.data,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //data : result.data,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeEvery(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeEvery(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/post.js"],"names":["all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_REQUEST","ADD_POST_TO_ME","shortId","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","addPostAPI","data","post","removePostAPI","addCommentAPI","addPost","action","id","generate","type","content","err","error","response","removePost","addComment","watchAddPost","watchLoadPost","loadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST } from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from './../reducers/post';\r\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.post(\"/api/removepost\", data);\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(\"/api/addcomment\", data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* removePost(action){\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        //const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeEvery(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}