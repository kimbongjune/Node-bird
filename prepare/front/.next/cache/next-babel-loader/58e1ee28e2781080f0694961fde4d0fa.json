{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from './../reducers/post';\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction loadPostAPI(data) {\n  return axios.post(\"/api/loadpost\", data);\n}\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/removepost\", data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* loadPost(action) {\n  try {\n    //const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      //data : result.data,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //data : result.data,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //data : result.data,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeEvery(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeEvery(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/nodeBird/prepare/front/sagas/post.js"],"names":["all","fork","call","put","take","takeEvery","takeLatest","throttle","delay","axios","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","generateDummyPost","ADD_POST_TO_ME","shortId","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","addPostAPI","data","post","content","loadPostAPI","removePostAPI","addCommentAPI","postId","addPost","action","result","id","generate","type","err","error","response","loadPost","removePost","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, call, put, take, takeEvery, takeLatest, throttle, delay} from \"redux-saga/effects\"\r\nimport axios from \"axios\";\r\nimport { ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost } from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\nimport { REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from './../reducers/post';\r\nimport { REMOVE_POST_OF_ME } from './../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post(\"/post\", { content : data});\r\n}\r\n\r\nfunction loadPostAPI(data){\r\n    return axios.post(\"/api/loadpost\", data);\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.post(\"/api/removepost\", data);\r\n}\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* loadPost(action){\r\n    try {\r\n        //const result = yield call(loadPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type : LOAD_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : LOAD_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* removePost(action){\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            //data : result.data,\r\n            data : action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeEvery(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeEvery(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}